// for eslint v3.3.1
{
  "parserOptions": {
    "ecmaVersion": 6 // 3, 5, 6, 7 (5 is default)
    , "sourceType": "module" // module || script
    , "ecmaFeatures": {
        "globalReturn": false // allow return statements in the global scope
          , "impliedStrict": true //  enable global strict mode (if ecmaVersion is 5 or greater)
          , "jsx": true // enable JSX
        }
    }
  // environment variables. enable like:
  // /* eslint-env node, mocha */
  /*
    browser - browser global variables.
    node - Node.js global variables and Node.js scoping.
    commonjs - CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).
    shared-node-browser - Globals common to both Node and Browser.
    es6 - enable all ECMAScript 6 features except for modules.
    worker - web workers global variables.
    amd - defines require() and define() as global variables as per the amd spec.
    mocha - adds all of the Mocha testing global variables.
    jasmine - adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    jest - Jest global variables.
    phantomjs - PhantomJS global variables.
    protractor - Protractor global variables.
    qunit - QUnit global variables.
    jquery - jQuery global variables.
    prototypejs - Prototype.js global variables.
    shelljs - ShellJS global variables.
    meteor - Meteor global variables.
    mongo - MongoDB global variables.
    applescript - AppleScript global variables.
    nashorn - Java 8 Nashorn global variables.
    serviceworker - Service Worker global variables.
    atomtest - Atom test helper globals.
    embertest - Ember test helper globals.
    webextensions - WebExtensions globals.
    greasemonkey - GreaseMonkey globals.

  */
  , "rules": {
    /**
    * Possible Errors
    * These rules relate to possible syntax or logic errors in JavaScript code:
    */
    "no-cond-assign": "error" //disallow assignment operators in conditional expressions
    , "no-console": ["error"] // disallow the use of console
    , "no-constant-condition": ["error", { "checkLoops": false }] // disallow constant expressions in conditions
    , "no-control-regex": ["error"] // disallow control characters in regular expressions
    , "no-debugger": ["error"] // disallow the use of debugger
    , "no-dupe-args": ["error"] // disallow duplicate arguments in function definitions
    , "no-dupe-keys": ["error"] // disallow duplicate keys in object literals
    , "no-duplicate-case": ["error"] // disallow duplicate case labels
    , "no-empty-character-class": ["error"] // disallow empty character classes in regular expressions
    , "no-empty": ["error"] // disallow empty block statements
    , "no-ex-assign": ["error"] // disallow reassigning exceptions in catch clauses
    , "no-extra-boolean-cast": ["error"] // disallow unnecessary boolean casts
    , "no-extra-parens": ["error", "all"] // disallow unnecessary parentheses
    , "no-extra-semi": ["error"] // disallow unnecessary semicolons
    , "no-func-assign": ["warn"] // disallow reassigning function declarations
    , "no-inner-declarations": ["error"] // disallow function or var declarations in nested blocks
    , "no-invalid-regexp": ["error"] // disallow invalid regular expression strings in RegExp constructors
    , "no-irregular-whitespace": ["error"] // disallow irregular whitespace outside of strings and comments
    , "no-obj-calls": ["error"] // disallow calling global object properties as functions
    , "no-prototype-builtins": ["error"] // disallow calling some Object.prototype methods directly on objects
    , "no-regex-spaces": ["error"] // disallow multiple spaces in regular expressions
    , "no-sparse-arrays": ["error"] // disallow sparse arrays
    , "no-template-curly-in-string": 0 // Disallow template literal placeholder syntax in regular strings
    , "no-unexpected-multiline": ["error"] // disallow confusing multiline expressions
    , "no-unreachable": ["warn"] // disallow unreachable code after return, throw, continue, and break statements
    , "no-unsafe-finally": ["warn"] // disallow control flow statements in finally blocks
    , "no-unsafe-negation": ["error"] // disallow negating the left operand of relational operators
    , "use-isnan": ["warn"] // require calls to isNaN() when checking for NaN
    , "valid-jsdoc": ["warn"] // enforce valid JSDoc comments
    , "valid-typeof": ["warn"] // enforce comparing typeof expressions against valid strings

    /**
    * Best Practices
    * These rules relate to better ways of doing things to help you avoid problems:
    */
    , "accessor-pairs": ["warn"] // enforce getter and setter pairs in objects
    , "array-callback-return": ["warn"] // enforce return statements in callbacks of array methods
    , "block-scoped-var": ["warn"] // enforce the use of variables within the scope they are defined
    , "complexity": ["error", 6] // enforce a maximum cyclomatic complexity allowed in a program
    , "consistent-return": ["warn"] // require return statements to either always or never specify values
    , "curly": ["error", "multi-line"] // enforce consistent brace style for all control statements
    , "default-case": ["error"] // require default cases in switch statements
    , "dot-location": ["error", "property"] // enforce consistent newlines before and after dots
    , "dot-notation": ["warn", {"allowKeywords": false}] // enforce dot notation whenever possible
    , "eqeqeq": 0 // require the use of === and !==
    , "guard-for-in": 0 // require for-in loops to include an if statement
    , "no-alert": ["warn"] // disallow the use of alert, confirm, and prompt
    , "no-caller": ["warn"] // disallow the use of arguments.caller or arguments.callee
    , "no-case-declarations": ["warn"] // disallow lexical declarations in case clauses
    , "no-div-regex": ["warn"] // disallow division operators explicitly at the beginning of regular expressions
    , "no-else-return": 0 // disallow else blocks after return statements in if statements
    , "no-empty-function": ["warn"] // disallow empty functions
    , "no-empty-pattern": ["error"] // disallow empty destructuring patterns
    , "no-eq-null": 0 // disallow null comparisons without type-checking operators
    , "no-eval": ["warn"] // disallow the use of eval()
    , "no-extend-native": ["warn"] // disallow extending native types
    , "no-extra-bind": ["warn"] // disallow unnecessary calls to .bind()
    , "no-extra-label": ["error"] // disallow unnecessary labels
    , "no-fallthrough": 0 // disallow fallthrough of case statements
    , "no-floating-decimal": 0 // disallow leading or trailing decimal points in numeric literals
    , "no-global-assign": ["error"] // disallow assignments to native objects or read-only global variables
    , "no-implicit-coercion": 0 // disallow shorthand type conversions
    , "no-implicit-globals": 0 // disallow var and named function declarations in the global scope
    , "no-implied-eval": ["error"] // disallow the use of eval()-like methods
    , "no-invalid-this": ["warn"] // disallow this keywords outside of classes or class-like objects
    , "no-iterator": ["error"] // disallow the use of the __iterator__ property
    , "no-labels": ["warn"] // disallow labeled statements
    , "no-lone-blocks": ["warn"] // disallow unnecessary nested blocks
    , "no-loop-func": ["warn"] // disallow function declarations and expressions inside loop statements
    , "no-magic-numbers": ["warn"] // disallow magic numbers
    , "no-multi-spaces": ["error", {"exceptions": { "Property": false }}] // disallow multiple spaces
    , "no-multi-str": ["warn"] // disallow multiline strings
    , "no-new-func": ["warn"] // disallow new operators with the Function object
    , "no-new-wrappers": ["error"] // disallow new operators with the String, Number, and Boolean objects
    , "no-new": ["warn"] // disallow new operators outside of assignments or comparisons
    , "no-octal-escape": ["error"] // disallow octal escape sequences in string literals
    , "no-octal": ["warn"] // disallow octal literals
    , "no-param-reassign": 0 // disallow reassigning function parameters
    , "no-proto": ["warn"] // disallow the use of the __proto__ property
    , "no-redeclare": ["error"] // disallow var redeclaration
    , "no-return-assign": 0 // disallow assignment operators in return statements
    , "no-script-url": ["warn"] // disallow javascript: urls
    , "no-self-assign": ["warn"] // disallow assignments where both sides are exactly the same
    , "no-self-compare": ["warn"] // disallow comparisons where both sides are exactly the same
    , "no-sequences": 0 // disallow comma operators
    , "no-throw-literal": ["error"] // disallow throwing literals as exceptions
    , "no-unmodified-loop-condition": ["warn"] // disallow unmodified loop conditions
    , "no-unused-expressions": ["warn"] // disallow unused expressions
    , "no-unused-labels": ["warn"] // disallow unused labels
    , "no-useless-call": ["warn"] // disallow unnecessary calls to .call() and .apply()
    , "no-useless-concat": 0 // disallow unnecessary concatenation of literals or template literals
    , "no-useless-escape": ["warn"] // disallow unnecessary escape characters
    , "no-void": 0 // disallow void operators
    , "no-warning-comments": ["warn"] // disallow specified warning terms in comments
    , "no-with": ["warn"] // disallow with statements
    , "radix": ["error"] // enforce the consistent use of the radix argument when using parseInt()
    , "vars-on-top": 0 // require var declarations be placed at the top of their containing scope
    , "wrap-iife": ["error", "outside"] // require parentheses around immediate function invocations
    , "yoda": ["error", "always"] // require or disallow “Yoda” conditions

    /**
    * Strict Mode
    * These rules relate to strict mode directives:
    */
    , "strict": 0 // require or disallow strict mode directives

    /**
    * Variables
    * These rules relate to variable declarations:
    */
    , "init-declarations": 0 // require or disallow initialization in var declarations
    , "no-catch-shadow": ["error"] // disallow catch clause parameters from shadowing variables in the outer scope
    , "no-delete-var": ["warn"] // disallow deleting variables
    , "no-label-var": ["warn"] // disallow labels that share a name with a variable
    , "no-restricted-globals": ["warn"] // disallow specified global variables
    , "no-shadow-restricted-names": ["error"] // disallow identifiers from shadowing restricted names
    , "no-shadow": ["error", {"builtinGlobals": true, "hoist": "functions", "allow": ["resolve", "reject", "done", "cb"]}] // disallow var declarations from shadowing variables in the outer scope
    , "no-undef-init": ["warn"] // disallow initializing variables to undefined
    , "no-undef": ["error", {"typeof": false}] // disallow the use of undeclared variables unless mentioned in /*global */ comments
    , "no-undefined": ["error"] // disallow the use of undefined as an identifier
    , "no-unused-vars": ["error"] // disallow unused variables
    , "no-use-before-define": 0 // disallow the use of variables before they are defined

    /**
    * Node.js and CommonJS
    * These rules relate to code running in Node.js, or in browsers with CommonJS:
    */
    , "callback-return": 0 // require return statements after callbacks
    , "global-require": ["warn"] // require require() calls to be placed at top-level module scope
    , "handle-callback-err": ["warn"] // require error handling in callbacks
    , "no-mixed-requires": 0 // disallow require calls to be mixed with regular var declarations
    , "no-new-require": ["error"] // disallow new operators with calls to require
    , "no-path-concat": ["warn"] // disallow string concatenation with __dirname and __filename
    , "no-process-env": 0 // disallow the use of process.env
    , "no-process-exit": 0 // disallow the use of process.exit()
    , "no-restricted-modules": ["error", ""] // disallow specified modules when loaded by require
    , "no-sync": 0 // disallow synchronous methods

    /**
    * Stylistic Issues
    * These rules relate to style guidelines, and are therefore quite subjective:
    */
    , "array-bracket-spacing": ["warn", "never", {"singleValue": true, "objectsInArrays": true, "arraysInArrays": true}] // enforce consistent spacing inside array brackets
    , "block-spacing": ["warn", "always"] // enforce consistent spacing inside single-line blocks
    , "brace-style": ["error", "stroustrup", {"allowSingleLine": true}] // enforce consistent brace style for blocks
    , "camelcase": ["error"] // enforce camelcase naming convention
    , "comma-dangle": ["error", "never"] // require or disallow trailing commas
    , "comma-spacing": ["error", {"before": false, "after": true}] // enforce consistent spacing before and after commas
    , "comma-style": ["error", "first", "exceptions": {}] // enforce consistent comma style
    , "computed-property-spacing": [0, "always"] // enforce consistent spacing inside computed property brackets
    , "consistent-this": 0 // enforce consistent naming when capturing the current execution context
    , "eol-last": ["warn"] // enforce at least one newline at the end of files
    , "func-call-spacing": ["error", "never"] // require or disallow spacing between function identifiers and their invocations
    , "func-names": 0 // require or disallow named function expressions
    , "func-style": 0 // enforce the consistent use of either function declarations or expressions
    , "id-blacklist": 0 // disallow specified identifiers
    , "id-length": 0 // enforce minimum and maximum identifier lengths
    , "id-match": 0 // require identifiers to match a specified regular expression
    , "indent": ["error", 2] // enforce consistent indentation
    , "jsx-quotes": ["error", "prefer-double"] // enforce the consistent use of either double or single quotes in JSX attributes
    , "key-spacing": 0 // enforce consistent spacing between keys and values in object literal properties
    , "keyword-spacing": ["error", {"before": true, "after": true}] // enforce consistent spacing before and after keywords
    , "linebreak-style": 0 // enforce consistent linebreak style
    , "lines-around-comment": 0 // require empty lines around comments
    , "max-depth": ["error", 4] // enforce a maximum depth that blocks can be nested
    , "max-len": ["warn", {"code": 120}] // enforce a maximum line length
    , "max-lines": 0 // enforce a maximum number of lines per file
    , "max-nested-callbacks": ["warn", 5] // enforce a maximum depth that callbacks can be nested
    , "max-params": ["warn", 4] // enforce a maximum number of parameters in function definitions
    , "max-statements-per-line": 0 // enforce a maximum number of statements allowed per line
    , "max-statements": ["warn", {"max": 10}] // enforce a maximum number of statements allowed in function blocks
    , "multiline-ternary": ["warn"] // enforce newlines between operands of ternary expressions
    , "new-cap": ["warn"] // require constructor function names to begin with a capital letter
    , "new-parens": 0 // require parentheses when invoking a constructor with no arguments
    , "newline-after-var": 0 // require or disallow an empty line after var declarations
    , "newline-before-return": 0 // require an empty line before return statements
    , "newline-per-chained-call": 0 // require a newline after each call in a method chain
    , "no-array-constructor": 0 // disallow Array constructors
    , "no-bitwise": 0 // disallow bitwise operators
    , "no-continue": 0 // disallow continue statements
    , "no-inline-comments": 0 // disallow inline comments after code
    , "no-lonely-if": ["warn"] // disallow if statements as the only statement in else blocks
    , "no-mixed-operators": 0 // disallow mixed binary operators
    , "no-mixed-spaces-and-tabs": ["error"] // disallow mixed spaces and tabs for indentation
    , "no-multiple-empty-lines": 0 // disallow multiple empty lines
    , "no-negated-condition": 0 // disallow negated conditions
    , "no-nested-ternary": 0 // disallow nested ternary expressions
    , "no-new-object": ["error"] // disallow Object constructors
    , "no-plusplus": 0 // disallow the unary operators ++ and --
    , "no-restricted-syntax": 0 // disallow specified syntax
    , "no-tabs": ["error"] // Disallow tabs in file
    , "no-ternary": 0 // disallow ternary operators
    , "no-trailing-spaces": ["error"] // disallow trailing whitespace at the end of lines
    , "no-underscore-dangle": 0 // disallow dangling underscores in identifiers
    , "no-unneeded-ternary": ["warn"] // disallow ternary operators when simpler alternatives exist
    , "no-whitespace-before-property": ["error"] // disallow whitespace before properties
    , "object-curly-newline": 0 // enforce consistent line breaks inside braces
    , "object-curly-spacing": 0 // enforce consistent spacing inside braces
    , "object-property-newline": ["error", { "allowMultiplePropertiesPerLine": true }] // enforce placing object properties on separate lines
    , "one-var-declaration-per-line": 0 // require or disallow newlines around var declarations
    , "one-var": 0 // enforce variables to be declared either together or separately in functions
    , "operator-assignment": 0 // require or disallow assignment operator shorthand where possible
    , "operator-linebreak": 0 // enforce consistent linebreak style for operators
    , "padded-blocks": 0 // require or disallow padding within blocks
    , "quote-props": ["error", "always"] // require quotes around object literal property names
    , "quotes": ["error", "double", {"avoidEscape": false}] // enforce the consistent use of either backticks, double, or single quotes
    , "require-jsdoc": ["error", { "require": {
          "FunctionDeclaration": false
          , "MethodDefinition": false
          , "ClassDeclaration": false
        }
      }] // require JSDoc comments
    , "semi-spacing": ["error", {"before": false, "after": true}] // enforce consistent spacing before and after semicolons
    , "semi": ["error", "always"] // require or disallow semicolons instead of ASI
    , "sort-keys": 0 // requires object keys to be sorted
    , "sort-vars": 0 // require variables within the same declaration block to be sorted
    , "space-before-blocks": ["error", "always"] // enforce consistent spacing before blocks
    , "space-before-function-paren": ["error", {"anonymous": "always", "named": "never"}] // enforce consistent spacing before function definition opening parenthesis
    , "space-in-parens": ["error", "never"] // enforce consistent spacing inside parentheses
    , "space-infix-ops": ["error"] // require spacing around operators
    , "space-unary-ops": [0, {"words": true, "nonwords": true}] // enforce consistent spacing before or after unary operators
    , "spaced-comment": ["error", "always"] // enforce consistent spacing after the // or /* in a comment
    , "unicode-bom": 0 // require or disallow Unicode byte order mark (BOM)
    , "wrap-regex": 0 // require parenthesis around regex literals


    /**
    * ECMAScript 6
    * These rules relate to ES6, also known as ES2015:
    */
    , "arrow-body-style": ["warn", "as-needed"] // require braces around arrow function bodies
    , "arrow-parens": ["warn", "as-needed"] // require parentheses around arrow function arguments
    , "arrow-spacing": ["warn", {"before": true, "after": true}] // enforce consistent spacing before and after the arrow in arrow functions
    , "constructor-super": ["warn"] // require super() calls in constructors
    , "generator-star-spacing": ["warn", "both"] // enforce consistent spacing around * operators in generator functions
    , "no-class-assign": ["warn"] // disallow reassigning class members
    , "no-confusing-arrow": 0 // disallow arrow functions where they could be confused with comparisons
    , "no-const-assign": ["warn"] // disallow reassigning const variables
    , "no-dupe-class-members": ["warn"] // disallow duplicate class members
    , "no-duplicate-imports": ["warn"] // disallow duplicate module imports
    , "no-new-symbol": ["warn"] // disallow new operators with the Symbol object
    , "no-restricted-imports": 0 // disallow specified modules when loaded by import
    , "no-this-before-super": ["warn"] // disallow this/super before calling super() in constructors
    , "no-useless-computed-key": ["warn"] // disallow unnecessary computed property keys in object literals
    , "no-useless-constructor": ["warn"] // disallow unnecessary constructors
    , "no-useless-rename": ["warn"] // disallow renaming import, export, and destructured assignments to the same name
    , "no-var": 0 // require let or const instead of var
    , "object-shorthand": ["warn", "consistent"] // require or disallow method and property shorthand syntax for object literals
    , "prefer-arrow-callback": [0, {"allowNamedFunctions": true}] // require arrow functions as callbacks
    , "prefer-const": ["warn"] // require const declarations for variables that are never reassigned after declared
    , "prefer-reflect": 0 // require Reflect methods where applicable
    , "prefer-rest-params": ["warn"] // require rest parameters instead of arguments
    , "prefer-spread": 0 // require spread operators instead of .apply()
    , "prefer-template": ["warn"] // require template literals instead of string concatenation
    , "require-yield": ["warn"] // require generator functions to contain yield
    , "rest-spread-spacing": ["error", "never"] // enforce spacing between rest and spread operators and their expressions
    , "sort-imports": 0 // enforce sorted import declarations within modules
    , "template-curly-spacing": ["error", "always"] // require or disallow spacing around embedded expressions of template strings
    , "yield-star-spacing": ["warn", "both"] // require or disallow spacing around the * in yield* expressions
  }
}
